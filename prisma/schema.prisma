generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model articles {
  id               Int       @id @default(autoincrement()) @db.UnsignedInt
  title            String
  body             String    @db.Text
  key              String?
  author_id        Int       @db.UnsignedInt
  slug             String?   @unique(map: "articles_slug_unique")
  seo_title        String?
  meta_description String?
  meta_keyword     String?
  status           String?
  deleted_at       DateTime? @db.Timestamp(0)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  excerpt          String?
  description      String?   @db.Text
  subtitle         String?   @db.Text
  image            String?
}

model cities {
  id          Int         @id @default(autoincrement())
  province_id Int
  name        String
  created_at  DateTime    @default(now())
  updated_at  DateTime    @default(now()) @updatedAt
  provinces   provinces   @relation(fields: [province_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cities_province_id_foreign")
  districts   districts[]
  profiles    profiles[]
  events      events[]

  @@index([province_id], map: "cities_province_id_foreign")
}

model districts {
  id         Int        @id @default(autoincrement())
  city_id    Int
  name       String
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt
  cities     cities     @relation(fields: [city_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "districts_city_id_foreign")
  profiles   profiles[]

  @@index([city_id], map: "districts_city_id_foreign")
}

model profiles {
  id                 Int                 @id @default(autoincrement())
  user_id            Int                 @unique
  nip                String?
  nik                String?
  contact            String?
  school_place       String?
  home_address       String?
  unit_kerja         String?
  gender             profiles_gender?
  birthdate          DateTime?           @db.Date
  created_at         DateTime            @default(now())
  updated_at         DateTime            @default(now()) @updatedAt
  province_id        Int?
  city_id            Int?
  district_id        Int?
  bio                String?             @db.Text
  headmaster_name    String?
  headmaster_nip     String?
  teaching_level     teaching_level?
  teacher_status     teacher_status?
  salary             Int?
  status_kepegawaian status_kepegawaian?
  certified          Boolean?            @default(false)
  inpassing          Boolean?            @default(false)
  bank_account       String?
  cities             cities?             @relation(fields: [city_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "profiles_city_id_foreign")
  districts          districts?          @relation(fields: [district_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "profiles_district_id_foreign")
  provinces          provinces?          @relation(fields: [province_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "profiles_province_id_foreign")
  user               users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "profiles_user_id_foreign")

  @@index([city_id], map: "profiles_city_id_foreign")
  @@index([district_id], map: "profiles_district_id_foreign")
  @@index([province_id], map: "profiles_province_id_foreign")
  @@index([user_id], map: "profiles_user_id_foreign")
}

model provinces {
  id         Int        @id @default(autoincrement())
  name       String
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt
  cities     cities[]
  profiles   profiles[]
  events     events[]
}

model users {
  id                  Int                   @id @default(autoincrement())
  kta_id              String?               @unique(map: "UNIQUE")
  name                String
  email               String                @unique(map: "users_email_unique")
  email_verified_at   DateTime?             @db.Timestamp(0)
  password            String
  created_at          DateTime              @default(now())
  updated_at          DateTime              @default(now()) @updatedAt
  position_id         Int?
  activated_at        DateTime?
  profile_img              String?
  background_img      String?
  profile             profiles?
  transactions        transactions[]
  membership_payments membership_payments[]
  position            positions?            @relation(fields: [position_id], references: [id], map: "users_position_id_foreign")
  events              events[]
  eventFollowed       followers_on_events[]

  @@index([position_id], map: "users_position_id_foreign")
}

model positions {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  users       users[]
}

model events {
  id             Int                   @id @default(autoincrement())
  title          String?
  start_time     DateTime?
  end_time       DateTime?
  session        String?
  place          String?
  province_id    Int?
  city_id        Int?
  facilities     String?
  eventType      EventType?
  description    String?
  category_id    Int?
  created_by     Int                   @unique
  image_path     String?
  creater        users?                @relation(fields: [created_by], references: [id], map: "event_created_by")
  cities         cities?               @relation(fields: [city_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "event_city_id_foreign")
  provinces      provinces?            @relation(fields: [province_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "event_province_id_foreign")
  followers      followers_on_events[]
  category       event_category?       @relation(fields: [category_id], references: [id], map: "event_category_id_foreign")
  event_sessions event_session[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([created_by], map: "event_created_by")
  @@index([city_id], map: "event_city_id_foreign")
  @@index([province_id], map: "event_province_id_foreign")
  @@index([category_id], map: "event_category_id_foreign")
}

model followers_on_events {
  // id        Int    @id @default(autoincrement())
  event_id Int
  event    events @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "followersOnEvents_event_id_foreign")
  user_id  Int
  user     users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "followersOnEvents_user_id_foreign")

  @@id([event_id, user_id])
}

model event_category {
  id          Int      @id @default(autoincrement())
  category    String
  description String?
  events      events[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model event_session {
  id          Int     @id @default(autoincrement())
  session     String
  description String?
  event_id    Int
  event       events  @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "eventSession_event_id_foreign")

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model payment_types {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  amount       Int
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now()) @updatedAt
  code         String
  transactions transactions[]
}

model transactions {
  id                 Int                  @id @default(autoincrement())
  title              String
  amount             Int
  user_id            Int
  payment_type_id    Int
  snap_token         String?
  status             String               @default("pending")
  created_at         DateTime             @default(now())
  updated_at         DateTime             @default(now()) @updatedAt
  snap_redirect_url  String?
  order_id           String               @unique(map: "transactions_order_id_unique")
  payment_type       payment_types        @relation(fields: [payment_type_id], references: [id])
  user               users                @relation(fields: [user_id], references: [id])
  raw_response       String?              @db.Text
  membership_payment membership_payments?

  @@index([payment_type_id], map: "transactions_payment_type_id_fkey")
  @@index([user_id], map: "transactions_user_id_fkey")
}

model membership_payments {
  id             Int      @id @default(autoincrement())
  user_id        Int
  amount         Int
  start_period   DateTime @default(now())
  end_period     DateTime @default(now())
  transaction_id Int?     @unique
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt

  user        users         @relation(fields: [user_id], references: [id], map: "membership_payments_user_id_foreign")
  transaction transactions? @relation(fields: [transaction_id], references: [id], map: "membership_payments_transaction_id_foreign")
}

enum profiles_gender {
  L
  P
}

enum teacher_status {
  ASN
  NON_ASN
  PPK
}

enum teaching_level {
  SD
  SMP
  SMA
  D1
  D2
  D3
  D4
  S1
  S2
  S3
}

enum status_kepegawaian {
  PNS_PEMDA
  PNS_KEMENAG
  PPPK_PEMDA
  PPPK_KEMENAG
  GTY
  HONOR_YAYASAN
  HONOR_DAERAH
  HONOR_MURNI_SEKOLAH
}

enum EventType {
  OFFLINE
  ONLINE
}
