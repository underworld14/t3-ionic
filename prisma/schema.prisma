generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model articles {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title            String
  body             String    @db.Text
  key              String?
  author_id        BigInt    @db.UnsignedBigInt
  slug             String?   @unique(map: "articles_slug_unique")
  seo_title        String?
  meta_description String?
  meta_keyword     String?
  status           String?
  deleted_at       DateTime? @db.Timestamp(0)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  excerpt          String?
  description      String?   @db.Text
  subtitle         String?   @db.Text
  image            String?
  users            users     @relation(fields: [author_id], references: [id], onUpdate: Restrict, map: "articles_author_id_foreign")

  @@index([author_id], map: "articles_author_id_foreign")
}

model bank_accounts {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String
  account_number    String
  bank_name         String?
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  bank_account_type String?
  bank_account_id   BigInt?   @db.UnsignedBigInt

  @@index([bank_account_type, bank_account_id], map: "bank_accounts_bank_account_type_bank_account_id_index")
}

model cities {
  id          BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  province_id BigInt      @db.UnsignedBigInt
  name        String
  description String?
  created_at  DateTime?   @db.Timestamp(0)
  updated_at  DateTime?   @db.Timestamp(0)
  provinces   provinces   @relation(fields: [province_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cities_province_id_foreign")
  districts   districts[]
  profiles    profiles[]

  @@index([province_id], map: "cities_province_id_foreign")
}

model department_divisions {
  id                BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  title             String
  description       String?       @db.Text
  start_date        DateTime      @db.Date
  end_date          DateTime      @db.Date
  divisionable_type String?
  divisionable_id   BigInt?       @db.UnsignedBigInt
  created_at        DateTime?     @db.Timestamp(0)
  updated_at        DateTime?     @db.Timestamp(0)
  departments       departments[]

  @@index([divisionable_type, divisionable_id], map: "department_divisions_divisionable_type_divisionable_id_index")
}

model department_users {
  id            BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  user_id       BigInt      @db.UnsignedBigInt
  department_id BigInt      @db.UnsignedBigInt
  created_at    DateTime?   @db.Timestamp(0)
  updated_at    DateTime?   @db.Timestamp(0)
  departments   departments @relation(fields: [department_id], references: [id], onUpdate: Restrict, map: "department_users_department_id_foreign")
  users         users       @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "department_users_user_id_foreign")

  @@index([department_id], map: "department_users_department_id_foreign")
  @@index([user_id], map: "department_users_user_id_foreign")
}

model departments {
  id                   BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  title                String
  key                  String?
  start_date           DateTime?             @db.Date
  end_date             DateTime?             @db.Date
  user_id              BigInt?               @db.UnsignedBigInt
  order                Int                   @default(0)
  departmentable_type  String?
  departmentable_id    BigInt?               @db.UnsignedBigInt
  created_at           DateTime?             @db.Timestamp(0)
  updated_at           DateTime?             @db.Timestamp(0)
  parent_id            BigInt?               @db.UnsignedBigInt
  division_id          BigInt?               @db.UnsignedBigInt
  department_users     department_users[]
  department_divisions department_divisions? @relation(fields: [division_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "departments_division_id_foreign")
  departments          departments?          @relation("departmentsTodepartments", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "departments_parent_id_foreign")
  other_departments    departments[]         @relation("departmentsTodepartments")
  users                users?                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "departments_user_id_foreign")

  @@index([departmentable_type, departmentable_id], map: "departments_departmentable_type_departmentable_id_index")
  @@index([division_id], map: "departments_division_id_foreign")
  @@index([parent_id], map: "departments_parent_id_foreign")
  @@index([user_id], map: "departments_user_id_foreign")
}

model districts {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  city_id     BigInt     @db.UnsignedBigInt
  name        String
  description String?
  created_at  DateTime?  @db.Timestamp(0)
  updated_at  DateTime?  @db.Timestamp(0)
  cities      cities     @relation(fields: [city_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "districts_city_id_foreign")
  profiles    profiles[]

  @@index([city_id], map: "districts_city_id_foreign")
}

model events {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt    @db.UnsignedBigInt
  name        String
  image       String?
  description String?   @db.Text
  start_at    DateTime  @db.DateTime(0)
  end_at      DateTime? @db.DateTime(0)
  address     String?
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  price       BigInt?
  type        String?
  link        String?
  deleted_at  DateTime? @db.Timestamp(0)
  category_id BigInt?   @db.UnsignedBigInt
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "events_user_id_foreign")

  @@index([category_id], map: "events_category_id_foreign")
  @@index([user_id], map: "events_user_id_foreign")
}

model follows {
  id                             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  parent_id                      BigInt    @db.UnsignedBigInt
  child_id                       BigInt    @db.UnsignedBigInt
  created_at                     DateTime? @db.Timestamp(0)
  updated_at                     DateTime? @db.Timestamp(0)
  follow_type                    String?
  follow_id                      BigInt?   @db.UnsignedBigInt
  users_follows_child_idTousers  users     @relation("follows_child_idTousers", fields: [child_id], references: [id], onDelete: Cascade, map: "follows_child_id_foreign")
  users_follows_parent_idTousers users     @relation("follows_parent_idTousers", fields: [parent_id], references: [id], onDelete: Cascade, map: "follows_parent_id_foreign")

  @@index([child_id], map: "follows_child_id_foreign")
  @@index([follow_type, follow_id], map: "follows_follow_type_follow_id_index")
  @@index([parent_id], map: "follows_parent_id_foreign")
}

model murottals {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name        String
  description String?   @db.Text
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model payment_vendors {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  type           String
  service_code   String
  description    String?
  account_number String
  account_name   String
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
}

model posts {
  id               Int          @id @default(autoincrement()) @db.UnsignedInt
  author_id        Int
  category_id      Int?
  title            String
  seo_title        String?
  excerpt          String?      @db.Text
  body             String       @db.Text
  image            String?
  slug             String       @unique(map: "posts_slug_unique")
  meta_description String?      @db.Text
  meta_keywords    String?      @db.Text
  status           posts_status @default(DRAFT)
  featured         Boolean      @default(false)
  created_at       DateTime?    @db.Timestamp(0)
  updated_at       DateTime?    @db.Timestamp(0)
  is_public        Boolean      @default(false)
  deleted_at       DateTime?    @db.Timestamp(0)
  key              String?
}

model profiles {
  id                            BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                       BigInt                  @db.UnsignedBigInt
  nip                           String?                 @db.VarChar(255)
  nik                           String?                 @db.VarChar(255)
  contact                       String?                 @db.VarChar(255)
  school_place                  String?                 @db.VarChar(255)
  home_address                  String?                 @db.VarChar(255)
  educational_level_id          BigInt?                 @db.UnsignedBigInt
  unit_kerja                    String?
  nama_kepala_satuan_pendidikan String?
  nip_kepala_satuan_pendidikan  String?
  gender                        profiles_gender?
  birthdate                     DateTime?               @db.Date
  created_at                    DateTime?               @db.Timestamp(0)
  updated_at                    DateTime?               @db.Timestamp(0)
  province_id                   BigInt?                 @db.UnsignedBigInt
  city_id                       BigInt?                 @db.UnsignedBigInt
  district_id                   BigInt?                 @db.UnsignedBigInt
  short_bio                     String?                 @db.Text
  long_bio                      String?                 @db.Text
  headmaster_name               String?
  headmaster_nip                String?
  grade_id                      BigInt?                 @db.UnsignedBigInt
  school_status                 profiles_school_status?
  cities                        cities?                 @relation(fields: [city_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "profiles_city_id_foreign")
  districts                     districts?              @relation(fields: [district_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "profiles_district_id_foreign")
  provinces                     provinces?              @relation(fields: [province_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "profiles_province_id_foreign")
  users                         users                   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "profiles_user_id_foreign")

  @@index([city_id], map: "profiles_city_id_foreign")
  @@index([district_id], map: "profiles_district_id_foreign")
  @@index([educational_level_id], map: "profiles_educational_level_id_foreign")
  @@index([grade_id], map: "profiles_grade_id_foreign")
  @@index([province_id], map: "profiles_province_id_foreign")
  @@index([user_id], map: "profiles_user_id_foreign")
}

model provinces {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  name        String
  description String?
  created_at  DateTime?  @default(now())
  updated_at  DateTime?  @updatedAt
  cities      cities[]
  profiles    profiles[]
}

model users {
  id                               BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  kta_id                           BigInt?            @unique(map: "UNIQUE")
  role_id                          BigInt?            @db.UnsignedBigInt
  name                             String
  email                            String             @unique(map: "users_email_unique")
  avatar                           String?           
  email_verified_at                DateTime?          @db.Timestamp(0)
  password                         String
  user_activated_at                DateTime?          @db.Timestamp(0)
  point                            BigInt             @default(0)
  remember_token                   String?            @db.VarChar(100)
  settings                         String?            @db.Text
  created_at                       DateTime           @default(now())
  updated_at                       DateTime           @updatedAt
  expired_at                       DateTime?          @db.DateTime(0)
  deleted_at                       DateTime?          @db.Timestamp(0)
  articles                         articles[]
  department_users                 department_users[]
  departments                      departments[]
  events                           events[]
  follows_follows_child_idTousers  follows[]          @relation("follows_child_idTousers")
  follows_follows_parent_idTousers follows[]          @relation("follows_parent_idTousers")
  profiles                         profiles[]

  @@index([role_id], map: "users_role_id_foreign")
}

enum posts_status {
  PUBLISHED
  DRAFT
  PENDING
}

enum profiles_gender {
  L
  P
}

enum profiles_school_status {
  Negeri
  Swasta
}
